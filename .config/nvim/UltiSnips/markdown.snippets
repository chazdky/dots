
priority -50

global !p
# A overkill(dirty) table with automatic alignment feature
def create_table(snip):
	# retrieving single line from current string and treat it like tabstops count
	placeholders_string = snip.buffer[snip.line].strip()
	rows_amount = int(placeholders_string[0])
	columns_amount = int(placeholders_string[1])

	prefix_str = "from vimsnippets import display_width;"

	# erase current line
	snip.buffer[snip.line] = ""

	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_title = "| "
	anon_snippet_delimiter = "|"
	for col in range(1, columns_amount+1):
		sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
		sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
		max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
		cur_width_str = "display_width(t[" + str(col) + "])"
		rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
		anon_snippet_title += "${" + str(col)  + ":head" + str(col)\
			+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "
		anon_snippet_delimiter += ":`!p " + prefix_str + "snip.rv = "\
			+ max_width_str + "*'-'" + "`-|"

	anon_snippet_title += "\n"

	anon_snippet_delimiter += "\n"
	anon_snippet_body = ""
	for row in range(1, rows_amount+1):
		body_row = "| "
		for col in range(1, columns_amount+1):
			sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
			sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
			max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
			cur_width_str = "display_width(t[" + str(row*columns_amount+col) + "])"
			rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
			placeholder = "R{0}C{1}".format(row, col)
			body_row += "${" + str(row*columns_amount+col)  + ":" + placeholder\
				+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "

		body_row += "\n"
		anon_snippet_body += body_row

	anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body

	# expand anonymous snippet
	snip.expand_anon(anon_snippet_table)
endglobal

###########################
# Sections and Paragraphs #
###########################
snippet "h([1-6])" "Markdown header" br
`!p snip.rv=int(match.group(1))*'#'` ${1:Section Title} `!p snip.rv=int(match.group(1))*'#'`

${0}
endsnippet

snippet sec "Section" b
# ${1:${VISUAL:Section Name}} #
${0}
endsnippet

snippet ssec "Sub Section" b
## ${1:${VISUAL:Section Name}} ##
${0}
endsnippet

snippet sssec "SubSub Section" b
### ${1:${VISUAL:Section Name}} ###
${0}
endsnippet

snippet par "Paragraph" b
#### ${1:${VISUAL:Paragraph Name}} ####
${0}
endsnippet

snippet spar "Paragraph" b
##### ${1:${VISUAL:Paragraph Name}} #####
${0}
endsnippet

###################
# Text formatting #
###################

# snippet * "italics" Ai
# *${1:${VISUAL}}*${0}
# endsnippet

# snippet ** "bold" Ai
# **${1:${VISUAL}}**${0}
# endsnippet

# snippet *** "bold italics" Ai
# ***${1:${VISUAL}}***${0}
# endsnippet

snippet ital "italics" Awi
*${1:${VISUAL}}*${0}
endsnippet

snippet bld "bold" Awi
**${1:${VISUAL}}**${0}
endsnippet

snippet bital "bold italics" Awi
***${1:${VISUAL}}***${0}
endsnippet

################
# Common stuff #
################
snippet lnk "Link to something" Ai
[${1:${VISUAL:Text}}](${3:http://${2:www.url.com}})${0}
endsnippet

snippet img "Image" Ab
![${1:pic alt}](${2:path}${3/.+/ "/}${3:opt title}${3/.+/"/})${0}
endsnippet

snippet ilc "Inline Code" Ai
\`${1:${VISUAL}}\`${0}
endsnippet

snippet cbl "Codeblock" Ab
\`\`\`${1}
${2:${VISUAL}}
\`\`\`
${0}
endsnippet

snippet pcb "Python Codeblock" Ab
\`\`\`python
${2:${VISUAL}}
\`\`\`
${0}
endsnippet

snippet lcb "Lua Codeblock" Ab
\`\`\`lua
${2:${VISUAL}}
\`\`\`
${0}
endsnippet

snippet scb "Shell Codeblock" Ab
\`\`\`sh
${2:${VISUAL}}
\`\`\`
${0}
endsnippet

snippet refl "Reference Link" 
[${1:${VISUAL:Text}}][${2:id}]${0}

[${2}]:${4:http://${3:www.url.com}} "${5:${4}}"
endsnippet

snippet fnt "Footnote"
[^${1:${VISUAL:Footnote}}]${0}

[^${1}]:${2:Text}
endsnippet

snippet note_basic "Anki note: Basic model" b
# Basic note
model: Basic
tags: ${1}

## Front
**${2:${1}}**

${3}

## Back
${0}

endsnippet

post_jump "create_table(snip)"
snippet "tb([1-9][1-9])" "Fancy table" br
`!p snip.rv=match.group(1)`
endsnippet

# vim:ft=snippets:
